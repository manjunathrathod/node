name: CI

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY_NAME: cloudaccelerator.azurecr.io # Set your ACR registry name
  IMAGE_NAME: myapp_node
  CLUSTER_NAME: trv-dev-aks
  RESOURCEGROUP: trv-dev-app-rg
  AKS_NAMESPACE: default

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      # required for all workflows
      security-events: write

      # only required for workflows in private repositories
      actions: read
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Cache dependencies
    - name: Cache Node.js modules
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-node-

    # Setup Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14' # You can specify the version you want

    # Install dependencies
    - name: Install Dependencies
      run: npm install --save-dev express eslint jest eslint-plugin-jest supertest

    # Linting
    - name: Lint Code
      run: npm run lint

    # Tests
    - name: Run Tests
      run: npm test
      # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      # Override language selection by uncommenting this and choosing your languages
      with:
        languages: javascript
 
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2

    - name: Security Checks
      run: npx audit-ci # or npx snyk test if you prefer Snyk

  build:
    name: build
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

    # Cache dependencies
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-

      # Setup Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14' # You can specify the version you want

      # Install dependencies
      - name: Install Dependencies
        run: npm install --save-dev express eslint jest eslint-plugin-jest supertest

      # Build the application
      - name: Build
        run: npm run build 

      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: ./build

  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Build and push image'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      - run: |
          docker build . -t ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  Deploy:
    runs-on: ubuntu-latest
    needs: [build, docker-build-and-push]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: ${{ env.CLUSTER_NAME }} # Replace with your AKS cluster name
          resource-group: ${{ env.RESOURCEGROUP }} # Replace with your resource group
        
      - uses: Azure/k8s-create-secret@v1
        with:
          container-registry-url: ${{ env.REGISTRY_NAME }}
          container-registry-username: ${{ secrets.ACR_USERNAME }}
          container-registry-password: ${{ secrets.ACR_PASSWORD }}
          secret-name: k8s-secret

      - uses: Azure/k8s-deploy@v1
        with:
          manifests: |
            manifests/deployment.yaml
            manifests/service.yaml
          images: |
            ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          imagepullsecrets: |
            k8s-secret